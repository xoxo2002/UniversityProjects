package keyboardjumping
import scalafx.scene.Scene
import scalafx.scene.image.{Image, ImageView}
import scalafx.scene.input.{KeyCode, KeyEvent}
import scalafx.scene.layout.{Border, BorderStrokeStyle, BorderWidths, CornerRadii, HBox}
import scalafx.scene.paint.Color
import scalafx.scene.shape.{Line, Rectangle}
import scalafx.application.JFXApp
import scalafx.application.JFXApp.PrimaryStage
import scalafx.Includes._
import scalafxml.core.{FXMLLoader, FXMLView, NoDependencyResolver}
import javafx.{scene => jfxs}
import keyboardjumping.controller.InputController
import keyboardjumping.model.{LivesBar, Platform, Player, Timer, WordSelector}
import keyboardjumping.model.LivesBar.livesIndicator
import scalafx.animation.AnimationTimer

import scala.collection.mutable.ListBuffer
import keyboardjumping.view.{GameController, GameDisplayController, GameOverController, PlatformController, PlayerController}
import scalafx.scene.control.Label

object MainApp extends JFXApp {
  //constants
  val Height = 400
  val Width = 600
  val playerHeight = 101
  val playerWidth = 65
  var currentPlatformX = 130
  var currentPlatformY = 270
  val startingPositionX = 412
  val startingPositionY = 300
  val Gravity = 0.6
  val MaxNoOfPlatforms =  20
  val PlatformWidth = 160
  val PlatformHeight = 30
  var q = 0 //for checking platforms and adding
  val CountdownTime: Long = 6

  var remainingTime = CountdownTime


  //scrolling
  val ScrollThreshold = 30
  var scroll = 0.0

  // root component of display
  val rootResource = getClass.getResource("view/RootLayout.fxml")
  val loader = new FXMLLoader(rootResource, NoDependencyResolver) // Load root layout from fxml file.
  loader.load();
  val roots = loader.getRoot[jfxs.layout.BorderPane]

  //gameDisplay component
  val gameDisplayResources = getClass.getResource("view/GameDisplay.fxml")
  val gameDisplayLoader = new FXMLLoader(gameDisplayResources, NoDependencyResolver)
  gameDisplayLoader.load();
  val gameDisplayRoot = gameDisplayLoader.getRoot[jfxs.layout.AnchorPane]

  //player component
  val image = new Image("keyboardjumping/view/images/facingfront.png")
  val playerImageView = new ImageView(image) {
    fitWidth = playerWidth // Set the desired width
    fitHeight = playerHeight // Set the desired height
  }
  gameDisplayRoot.children.add(playerImageView)
  //val playerImageView = gameDisplayLoader.getNamespace.get("playerImageView").asInstanceOf[javafx.scene.image.ImageView]
  val player = new Player(startingPositionX, startingPositionY)
  var isJumping = false
  playerImageView.layoutX = player.x
  playerImageView.layoutY = player.y

  //platform components
  var platforms: ListBuffer[Platform] = ListBuffer.empty
  val platformsImageView: ListBuffer[ImageView] = ListBuffer.empty
  val words: ListBuffer[String] = ListBuffer.empty
  val wordsView: ListBuffer[HBox] = ListBuffer.empty

  //Scoreboard
  var totalScoreSoFar = 0
  var totalFault = 0
  var startTime: Long = 0
  var elapsedTime: Long = 0

  //keeping track of words, wordsImageView, platforms, platforms image view
  var reachCoordinate = true
  var i = 0
  var j = 0
  var m = 0

  //Threshold
  val line = new Line {
    startX = 0
    startY = ScrollThreshold
    endX = Width
    endY = ScrollThreshold
  }

  //timelabel
  val timeLabel = new Label {
    text = "Time you have left: 0"
    style = "-fx-font-size: 18px;" // Optional: Set the font size
    layoutX = 10
    layoutY = 65
  }
  gameDisplayRoot.children.add(timeLabel)

  //scorelabel
  val scoreLabel = new Label {
    text = "Score: 0"
    style = "-fx-font-size: 18px;" // Optional: Set the font size
    layoutX = 10
    layoutY = 40
  }
  gameDisplayRoot.children.add(scoreLabel)

  //Lives Indicator
  gameDisplayRoot.children.add(LivesBar.livesIndicator)

  private val platformController = new PlatformController(gameDisplayRoot, platforms, platformsImageView, wordsView)  //platformController
  private val inputController = new InputController(wordsView)//inputController
  private val playerController = new PlayerController(player, playerImageView, platforms)//playerController

  // initialize stage
  stage = new PrimaryStage {
    title = "Keyboard Jumping Game"
    scene = new Scene {
      root = roots
    }
  }
  val gc = new GameController(gameDisplayRoot, player, playerImageView, platforms, platformsImageView, wordsView, words)
  gc.loop.start()


  //  val timer = new Timer()
//  //loop for game display
//  val loop = AnimationTimer { time =>
//    timer.decrementTimer(time)
//
//    //check for key events
//    playerController.handleMovement()
//    playerController.checkPlatformCollision()
//
//    //Update platforms while scrolling
//    platformController.updatePlatformsPosition()
//    playerController.handleThresholdCollision()
//    playerController.updatePlayerImage()
//  }

//  def start(): Unit = {
//    currentPlatformX = 130
//    currentPlatformY = 270
//    q = 0
//    scroll = 0.0
//    totalScoreSoFar = 0
//    totalFault = 0
//    startTime = 0
//    isJumping = false
//    scoreLabel.text = s"Score: $totalScoreSoFar"
//
//    //keeping track of words, wordsImageView, platforms, platforms image view
//    reachCoordinate = true
//    i = 0
//    j = 0
//    m = 0
//
//    //println(s"Children count before removal: ${gameDisplayRoot.children.size}")
//    wordsView.foreach(gameDisplayRoot.children.remove)
//    platformsImageView.foreach(gameDisplayRoot.children.remove)
//    platforms.foreach(gameDisplayRoot.children.remove)
//    //println(s"Children count after removal: ${gameDisplayRoot.children.size}")
//
//    // Clear platforms and words
//    platforms.clear()
//    platformsImageView.clear()
//    words.clear()
//    wordsView.clear()
//    print(platforms.length, platformsImageView.length, words.length, wordsView.length)
//
//    // Reset player position and appearance
//    player.x = startingPositionX
//    player.y = startingPositionY
//    playerImageView.layoutX = player.x
//    playerImageView.layoutY = player.y
//    currentPlatformX = 130
//    currentPlatformY = 270
//
//    // Reset lives indicator
//    LivesBar.resetLives()
//
//    // Generate new platforms and start the game loop
//    platformController.generatePlatform()
//
//    //handle keyboard input events
//    gameDisplayRoot.onKeyPressed = (event: KeyEvent) => {
//      inputController.onKeyPressed(event)
//    }
//    gameDisplayRoot.onKeyReleased = (event: KeyEvent) => {
//      inputController.onKeyReleased(event)
//    }
//
//    // Show the game display
//    this.roots.setCenter(gameDisplayRoot)
//    gc.loop.start()
//  }

  def showGameOverScreen(): Unit = {
    show("view/GameOver.fxml")
  }

  def showSuccessScreen(): Unit = {
    show("view/Success.fxml")
  }

  def showMainMenu(): Unit = {
    show("view/MainMenu.fxml")
  }

  def show(resourcePath: String): Unit = {
    val resources = getClass.getResource(resourcePath)
    val loader = new FXMLLoader(resources, NoDependencyResolver)
    loader.load()
    val root = loader.getRoot[jfxs.layout.AnchorPane]
    this.roots.setCenter(root)
  }

  //start by showing main menu
  showMainMenu()
}
